// SPDX-License-Identifier: MIT
pragma solidity ^0.8.9;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract MyToken is ERC20, ERC20Burnable, Ownable {
    event Redeem(address indexed player, uint256 amount, string itemName);

    struct InGameItem {
        uint256 price; // The price of the item in tokens
        uint256 quantity; // The quantity available in the store
    }

    mapping(string => InGameItem) private inGameStore;

    constructor() ERC20("Dengen", "DGN") {}

    function mint(address to, uint256 amount) public onlyOwner {
        _mint(to, amount);
    }

    function addItemToStore(string memory itemName, uint256 price, uint256 quantity) public onlyOwner {
        require(price > 0, "Price should be greater than 0");
        require(quantity > 0, "Quantity should be greater than 0");

        inGameStore[itemName] = InGameItem(price, quantity);
    }

    function redeem(string memory itemName) public {
        require(inGameStore[itemName].price > 0, "Item not available in the store");
        require(balanceOf(msg.sender) >= inGameStore[itemName].price, "Insufficient balance");
        require(inGameStore[itemName].quantity > 0, "Item out of stock");

        // Perform your in-game store redemption logic here
        // ...

        // Transfer tokens to the owner (or designated account for the store)
        _transfer(msg.sender, owner(), inGameStore[itemName].price);

        // Update the quantity of the item in the store
        inGameStore[itemName].quantity--;

        emit Redeem(msg.sender, inGameStore[itemName].price, itemName);
    }

    function checkBalance(address player) public view returns (uint256) {
        return balanceOf(player);
    }

    function getInGameItemDetails(string memory itemName) public view returns (uint256 price, uint256 quantity) {
        return (inGameStore[itemName].price, inGameStore[itemName].quantity);
    }
}



